.. title: "Classify VistA Data formatting"

============================================
Creating the JSON for "Classify VistA Data"
============================================

**JSON Glossary**

For clarity, we are going to use the following nomenclature to differentiate
the objects within JSON entry using the following scheme:

.. parsed-literal::

  "entryKey" : {
      "valueKey":"valueObject"
   }

The "Classify VistA Data" page ingests JSON information and attempts to
group the entries found within.  It does this by finding common ``valueKey``
entries and capturing the ``valueObject`` that it corresponds to.  As additional
``valueKeys``  are found in common amongst the entries, a more complete picture
is formed by the pie chart.

Generating from the OSEHRA Testing Repository
---------------------------------------------

The JSON information that the page expects to be uploaded is generated by the
FileManGlobalDataParser script. See the `Generate ViViaN and Dox`_ for
instructions on how to execute that task.

This information should already be available when the ViViaN instance is set
up to run.  There is a dropdown box on the page will contain the list of
files that are available to be selected from the back-end information.

Generating from another source
------------------------------

To generate information from a different source in the expected form for the
ViViaN page to ingest, there are a few rules that should be adhered to.  These
rules are in place to ensure that the generated files mirror the JSON generated
by the OSEHRA Testing repository.

For example,  here is an generated entry from a file in VistA which we will use
to demonstrate the additional constraints.

.. parsed-literal::

  {
      "1": {
          ".01": "NAME: BLACK, NOT OF HISPANIC ORIGIN",
          "100": "SYNONYM: {{SYNONYM: NEGRO}, {SYNONYM: AFROAMERICAN}}",
          "2": "ABBREVIATION: 4",
          "200": "INACTIVE: YES",
          "202": "INACTIVATION DATE: 2003-01-09 00:00:00"
      }
  }

* Each ``valueObject`` should have a string which further describes the entry.
  This  string should be consistent among ``valueKey`` objects throught the JSON
  file.  The string should end with a colon(:). For example:

            ".01": "NAME: BLACK, NOT OF HISPANIC ORIGIN",

  ``.01``, has a corresponding text value, ``NAME``.  Each of these values
  will be used as part of the display when selecting the values for the pie
  chart to display.

* If a ``valueObject`` contains multiple values, the leading string should be
  use again to denote the object values. For example:

            "100": "**SYNONYM**: {{**SYNONYM**: NEGRO}, {**SYNONYM**: AFROAMERICAN}}",

  As part of the ``100`` or ``SYNONYM`` entry, one can see the repeated use of
  the ``SYNONYM`` string to indicate the multiple entries within that ``valueObject``.


.. _`Generate ViViaN and Dox`: https://github.com/OSEHRA/VistA/blob/master/Documentation/generateViViaNAndDox.rst#4generate-vivian-data-and-dox
.. _`usual JSON rules`: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf